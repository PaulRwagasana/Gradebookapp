import random  # For demo GPA calculation

# Define the Student class
class Student:
    def __init__(self, email, name):
        self.email = email
        self.name = name
        self.courses_registered = {}
        self.GPA = 0.0
    
    def register_for_course(self, course_name, trimester, credits):
        self.courses_registered[course_name] = {'trimester': trimester, 'credits': credits}
    
    def calculate_GPA(self):
        total_credits = 0
        weighted_sum = 0.0
        for course in self.courses_registered.values():
            total_credits += course['credits']
            # Simulated GPA calculation, assuming grades are available in the future
            # Here, we simply calculate based on credits and a random grade (0.0 to 4.0 scale)
            weighted_sum += course['credits'] * (4.0 * random.random())  # Random GPA for demonstration
        if total_credits > 0:
            self.GPA = weighted_sum / total_credits
        else:
            self.GPA = 0.0
        return self.GPA

# Define the Course class
class Course:
    def __init__(self, name, trimester, credits):
        self.name = name
        self.trimester = trimester
        self.credits = credits

# Define the GradeBook class
class GradeBook:
    def __init__(self):
        self.student_list = []
        self.course_list = []
    
    def add_student(self, student):
        self.student_list.append(student)
    
    def add_course(self, course):
        self.course_list.append(course)
    
    def register_student_for_course(self, student, course):
        student.register_for_course(course.name, course.trimester, course.credits)
    
    def calculate_ranking(self):
        # Sort students by GPA in descending order
        ranked_students = sorted(self.student_list, key=lambda student: student.GPA, reverse=True)
        return ranked_students
    
    def search_by_grade(self, grade):
        # Search students who have GPA >= grade
        result = [student for student in self.student_list if student.GPA >= grade]
        return result
    
    def generate_transcript(self, student):
        # Generate and return transcript for a student
        transcript = f"Transcript for {student.name}:\n"
        for course_name, details in student.courses_registered.items():
            transcript += f"Course: {course_name}, Trimester: {details['trimester']}, Credits: {details['credits']}\n"
        transcript += f"GPA: {student.GPA}\n"
        return transcript

# Create a GradeBook instance
grade_book = GradeBook()

# Sample data initialization
course1 = Course("Math", "Fall 2023", 4)
course2 = Course("History", "Fall 2023", 3)
course3 = Course("Physics", "Spring 2024", 5)

student1 = Student("student1@example.com", "Alice")
student2 = Student("student2@example.com", "Bob")

# Add courses to the GradeBook
grade_book.add_course(course1)
grade_book.add_course(course2)
grade_book.add_course(course3)

# Add students to the GradeBook
grade_book.add_student(student1)
grade_book.add_student(student2)

# Register students for courses
grade_book.register_student_for_course(student1, course1)
grade_book.register_student_for_course(student1, course2)
grade_book.register_student_for_course(student2, course2)
grade_book.register_student_for_course(student2, course3)

# Calculate GPA for students
for student in grade_book.student_list:
    student.calculate_GPA()

# Command-Line Interface (CLI) loop
while True:
    print("\nWelcome to GradeBook Application")
    print("1. Calculate Ranking")
    print("2. Search by Grade")
    print("3. Generate Transcript")
    print("4. Exit")
    
    choice = input("Enter your choice (1/2/3/4): ")
    
    if choice == '1':
        # Calculate and display ranking
        ranked_students = grade_book.calculate_ranking()
        print("\nRanking of Students:")
        for i, student in enumerate(ranked_students, start=1):
            print(f"{i}. {student.name} - GPA: {student.GPA}")
    
    elif choice == '2':
        # Search by grade
        grade_threshold = float(input("Enter grade threshold: "))
        result = grade_book.search_by_grade(grade_threshold)
        print(f"\nStudents with GPA >= {grade_threshold}:")
        for student in result:
            print(f"{student.name} - GPA: {student.GPA}")
    
    elif choice == '3':
        # Generate transcript for a student
        student_name = input("Enter student name for transcript: ")
        for student in grade_book.student_list:
            if student.name == student_name:
                transcript = grade_book.generate_transcript(student)
                print("\nTranscript:")
                print(transcript)
                break
        else:
            print(f"Student '{student_name}' not found.")
    
    elif choice == '4':
        print("Exiting GradeBook Application. Goodbye!")
        break
    
    else:
        print("Invalid choice. Please enter 1, 2, 3, or 4.")
